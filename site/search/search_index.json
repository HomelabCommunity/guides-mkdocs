{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Cloudflare/ddns-with-curl/","title":"Setting Up Dynamic DNS with <code>curl</code> requests","text":"<p>Note</p> <p>In this guide, we will be setting up a Bash script on a server to fetch your IP via the Cloudflare <code>/cdn-cgi/trace</code> endpoint, and then using the result in another <code>curl</code> request to the Cloudflare API to update your DNS Record(s).</p> <p>Note</p> <p>I can be found on the Homelab Discord as @ramstik. Any questions related to this guide can be sent to me there.</p> <p>This guide assumes the following:</p> <ul> <li>You are using a Debian Bookworm LXC Template in Proxmox.</li> <li>You have created a non-root user.</li> <li><code>sudo</code> is installed.</li> <li>Your created user is in the <code>sudo</code> group.</li> <li><code>apt update</code> has been run, and is up to date on packages.</li> </ul> <p>If any of these do not apply, please use your best judgment to adjust as needed to fit your environment.</p>"},{"location":"Cloudflare/ddns-with-curl/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure <code>curl</code> and <code>ripgrep</code> are installed<ul> <li><code>sudo apt install curl ripgrep</code></li> </ul> </li> </ul>"},{"location":"Cloudflare/ddns-with-curl/#step-1-obtain-an-api-token","title":"Step 1: Obtain an API Token","text":"<p>a) Navigate to the API Tokens page on the Cloudflare Dashboard User Profile page. Link</p> <p>b) Click the button to Create Token, and select the \"Edit zone DNS\" template as a base.</p> <p>c) Click the Pencil icon to the right of Token Name, and give it a descriptive name.</p> <p>d) Don't add to or remove from the Permissions section.</p> <p>e) Add your desired Zone to the Zone Resources section.</p> <ul> <li>Include &gt; Specific zone &gt; homelab.place</li> </ul> <p>f) No other changes need to be made here.</p> <p>Note</p> <p>If you wish, you can scope out an Expiration Date for the token, and/or add an IP Address restriction. Upon expiration, or if your IP changes, this Token will need to be edited.</p> <p>g) Click \"Continue to summary\" - Verify the information is correct, and then click Create Token.</p> <p>h) Copy this token to a safe place, and do not give it to anyone as this token can now make DNS edits.</p>"},{"location":"Cloudflare/ddns-with-curl/#step-2-retrieve-zone-id","title":"Step 2: Retrieve Zone ID","text":"<p>a) In the Dashboard, return to your Home page. Click into the Zone you wish to configure for Dynamic DNS.</p> <p>b) At the lower-right of the Overview page, locate the Zone ID, and copy it to a safe place.</p> <p></p>"},{"location":"Cloudflare/ddns-with-curl/#step-3-create-a-dns-record","title":"Step 3: Create a DNS Record","text":"<p>Note</p> <p>The record created should have the name you want to actually use. The IP Address will be a temporary dummy IP. You do not need to set the Proxy option now, as I will explain later how to have the script do this for you.</p> <p>a) In the Cloudflare Dashboard, go to the DNS Records page</p> <p>b) Create a new DNS Record.</p> <ul> <li>Name: your desired, usable hostname</li> <li>IPv4 Address: 192.0.2.1</li> <li>Save</li> </ul> <p></p>"},{"location":"Cloudflare/ddns-with-curl/#step-4-retrieve-dns-record-id-via-api","title":"Step 4: Retrieve DNS Record ID via API","text":"<p>Now we're getting into the API stuff. We will be using the Cloudflare API to get the DNS Record ID for the record we just created.</p> <p>a) Copy this code to your preferred text editor:</p> <pre><code>curl -X GET \\\n       --url https://api.cloudflare.com/client/v4/zones/&lt;ZONE_ID&gt;/dns_records \\\n       --header 'Content-Type: application/json' \\\n       --header 'Authorization: Bearer &lt;DNS:EDIT_TOKEN&gt;' \\\n</code></pre> <p>b) Replace the values as follows:</p> <ul> <li><code>&lt;ZONE_ID&gt;</code> : Replace with your retrieved Zone ID from Step 2</li> <li><code>&lt;DNS:EDIT_TOKEN&gt;</code> : Replace with the API Token you generated in Step 1</li> </ul> <p>c) Once you have the formatted command, copy+paste it to a Terminal and run it.  </p> <p>Note</p> <p>If everything was done right, the command should have returned a mess of JSON data. Copy and paste the JSON data to a text editor that supports \"pretty JSON\" if you prefer. VS Code is good for this. You can paste the data, then right-click and use \"Format Document\".</p> <p>d) Run a search for the DNS Record name you created:</p> <p></p> <p>Note the <code>id</code> field. Copy this to your document for later usage.</p>"},{"location":"Cloudflare/ddns-with-curl/#step-5-formatting-the-curl-script","title":"Step 5: Formatting the <code>curl</code> script","text":"<p>Now that you have an API Token, a Zone ID, and a DNS Record ID, you can format the following cURL script:</p> <pre><code>#!/usr/bin/env bash\n\ntouch known-ip.txt\nIP=$(curl -s4 https://cloudflare.com/cdn-cgi/trace | rg -r '$1' 'ip=(.+)')\nKNOWN=$(&lt; known-ip.txt)\n\nif [ \"$IP\" != \"$KNOWN\" ]; then\n  echo \"$IP\" &gt; known-ip.txt\n  curl -X PUT \\\n       --url https://api.cloudflare.com/client/v4/zones/ZONE_ID/dns_records/DNS_REC_ID \\\n       --header 'Content-Type: application/json' \\\n       --header 'Authorization: Bearer DNS:EDIT_TOKEN' \\\n       --data \"{\\\"content\\\": \\\"$IP\\\", \\\"name\\\": \\\"DNS_REC_NAME\\\", \\\"proxied\\\": true, \\\"type\\\": \\\"A\\\", \\\"comment\\\": \\\"Updated by ME on $(date).\\\", \\\"ttl\\\": 1}\"\nfi\n</code></pre> <p>Replace the following values:</p> <ul> <li>ZONE_ID in the URL</li> <li>DNS_REC_ID in the URL</li> <li>ZONE:EDIT_TOKEN in the second <code>--header</code> line</li> <li>DNS_REC_NAME in the <code>--data</code> line</li> </ul> <p>Note</p> <p>Optionally, change the Note in the Comment section. This creates a Comment on the record in Cloudflare. In its current format, it simply adds a modification date to the record. Be careful to not remove any quotes or escape characters marked with ^ <pre><code> \\\"Updated by ME on $(date).\\\", \n ^^                         ^^\n</code></pre></p>"},{"location":"Cloudflare/ddns-with-curl/#script-description","title":"Script Description","text":"<ul> <li><code>touch known-ip.txt</code> will create the file that the IP will be stored in for comparison in the script.</li> <li>The first <code>curl -s4</code> requests uses https://cloudflare.com/cdn-cgi/trace to retrieve your IP and saves it to a variable.</li> <li>The <code>if</code> script will check to see if the IP is known. If the IP is not known or the <code>known-ip.txt</code> does not exist, it will create the file, or update the IP if the file does exist.</li> <li>The second <code>curl -X PUT</code> request will use the IP from the file, with the values you gave it, and update the DNS Record.</li> </ul>"},{"location":"Cloudflare/ddns-with-curl/#changing-proxy-behavior","title":"Changing Proxy Behavior","text":"<p>The Cloudflare Proxy can be set here as well. On the <code>--data</code> line, there are two values that need to be edited.</p> <ul> <li> <p>To disable the Proxy, set <code>\\\"proxied\\\": false,</code> and <code>\\\"ttl\\\": 300}\"</code></p> <ul> <li>You can use a longer or shorter value instead of 300. This is in seconds.</li> </ul> </li> <li> <p>To enable/re-enable the Proxy, set <code>\\\"proxied\\\": true,</code> and <code>\\\"ttl\\\": 1}\"</code></p> <ul> <li>TTL must equal 1. </li> </ul> </li> </ul>"},{"location":"Cloudflare/ddns-with-curl/#example-script","title":"Example Script","text":"<p>This is a working, redacted example with no placeholders.</p> <pre><code>#!/usr/bin/env bash\n\ntouch known-ip.txt\nIP=$(curl -s4 https://cloudflare.com/cdn-cgi/trace | rg -r '$1' 'ip=(.+)')\nKNOWN=$(&lt; known-ip.txt)\n\nif [ \"$IP\" != \"$KNOWN\" ]; then\n  echo \"$IP\" &gt; known-ip.txt\n  curl -X PUT \\\n       --url https://api.cloudflare.com/client/v4/zones/5f1aa8~~&lt;REDACTED&gt;~~b1f90/dns_records/70e2cd126391f29b41b41eb910aabfd6 \\\n       --header 'Content-Type: application/json' \\\n       --header 'Authorization: Bearer KJBn~~&lt;REDACTED&gt;~~gxQU' \\\n       --data \"{\\\"content\\\": \\\"$IP\\\", \\\"name\\\": \\\"dummy-dns.homelab.place\\\", \\\"proxied\\\": true, \\\"type\\\": \\\"A\\\", \\\"comment\\\": \\\"Updated by ME on $(date).\\\", \\\"ttl\\\": 1}\"\nfi\n</code></pre>"},{"location":"Cloudflare/ddns-with-curl/#running-the-script","title":"Running the script","text":"<p>Copy the finalized curl request to a terminal and run it. </p>"},{"location":"Cloudflare/ddns-with-curl/#expected-response","title":"Expected Response","text":"<p>You should receive JSON feedback for what was changed, along with the value <code>\"success\": true</code> near the end of the output. If this is seen, the script was successful, and you can proceed to set it up in crontab to run automatically.</p>"},{"location":"Cloudflare/ddns-with-curl/#running-automatically-with-crontab","title":"Running automatically with crontab","text":"<p>This script can be placed into crontab to run automatically: <code>*/5 * * * * /usr/bin/bash /path/to/script.sh</code></p> <p>Feel free to use any other system to run this on a schedule.</p>"}]}